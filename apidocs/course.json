{
  "openapi": "3.0.3",
  "info": {
    "title": "API Documentation of Online Course Website",
    "description": "This is API documentation of the online course website created using Go-Lang. There are 7 groups of endpoints in this api documentation, including: (1) user endpoints, (2) author endpoints, (3) category endpoints, (4) course endpoints, (5) lesson-title endpoints, (6) lesson-content endpoints, and (7) transaction endpoints.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:2802/api/v1"
    }
  ],
  "paths": {
    "/courses": {
      "post": {
        "security": [{
          "AuthorAuth": []
        }],
        "tags": ["Course Endpoints"],
        "summary": "Create Course Endpoint",
        "description": "This endpoint is used for create a new course\n\n Important note: Must to create category first!",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["author_id","title","slug","description","perks","price","category"],
                "properties": {
                  "author_id": {
                    "type": "integer",
                    "example": 1
                  },
                  "title": {
                    "type": "string",
                    "example": "Golang course"
                  },
                  "slug": {
                    "type": "string",
                    "example": "golang-course"
                  },
                  "description": {
                    "type": "string",
                    "example": "Course description"
                  },
                  "perks": {
                    "type": "string",
                    "example": "perks1, perks2, perks3"
                  },
                  "price": {
                    "type": "integer",
                    "example": 99000
                  },
                  "category": {
                    "type": "string",
                    "example": "Backend"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response (first made, banner is empty and users_enrolled= 0)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error response if request body not as required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Error response if invalid authorization token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Course Endpoints"],
        "summary": "Get All Available Courses",
        "description": "This endpoint is used to get all the courses are available",
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfCourses"
                }
              }
            }
          },
          "404": {
            "description": "Error response if courses not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      }
    },
    "/courses/{courseId}/banners": {
      "put": {
        "security": [{
          "AuthorAuth": []
        }],
        "tags": ["Course Endpoints"],
        "summary": "Upload Banner's Course Endpoint",
        "description": "This endpoint is used for upload banner from a course",
        "parameters": [{
          "name": "courseId",
          "in": "path",
          "description": "Course Id"
        }],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": ["banner"],
                "properties": {
                  "banner": {
                    "type": "string",
                    "format": "binary",
                    "example": "golang.jpg"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "status": {
                      "type": "string",
                      "example": "Banner is successfully uploaded"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "is_uploaded": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error response if invalid authorization token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "Error response if course not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      }
    },
    "/courses/author/{authorId}": {
      "get": {
        "summary": "Get Course By Author ID",
        "tags": ["Course Endpoints"],
        "description": "This endpoint is used for get a course detail by author id",
        "parameters": [{
          "name": "authorId",
          "in": "path",
          "description": "Author ID"
        }],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfCourses"
                }
              }
            }
          },
          "404": {
            "description": "Error response if courses not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      }
    },
    "/courses/{slug}": {
      "get": {
        "tags": ["Course Endpoints"],
        "summary": "Get Course Detail By Slug",
        "description": "This endpoint is used for get a course detail by slug",
        "parameters": [{
          "name": "slug",
          "in": "path",
          "description": "Slug"
        }],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfCourses"
                }
              }
            }
          },
          "404": {
            "description": "Error response if courses not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      }
    },
    "/courses/categories/{categoryName}": {
      "get": {
        "tags": ["Course Endpoints"],
        "summary": "Get Course Detail By Category",
        "description": "This endpoint is used for get a course detail by category",
        "parameters": [{
          "name": "categoryName",
          "in": "path",
          "description": "Category Name"
        }],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfCourses"
                }
              }
            }
          },
          "404": {
            "description": "Error response if courses not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      }
    },
    "/courses/enrolled": {
      "get": {
        "security": [{
            "UserAuth": []
          }],
        "tags": ["Course Endpoints"],
        "summary": "Get all the courses that the user has purchased",
        "description": "This is endpoint to get all the courses that the user has purchased for",
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfCourses"
                }
              }
            }
          },
          "404": {
            "description": "Error response if courses not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      }
    },
    "/courses/:courseId/enrolled": {
      "post": {
        "security": [{
          "UserAuth": []
        }],
        "tags": ["Course Endpoints"],
        "summary": "User Enroll a Course Endpoint",
        "description": "This endpoint is used for user to purchase a course",
        "parameters": [{
          "name": "courseId",
          "in": "path",
          "description": "Course ID"
        }],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "example": 200
                    },
                    "status": {
                      "type": "string",
                      "example": "Success to enrolled"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "enrolled_by": {
                          "type": "string",
                          "example": "Bella Rizky Kharisma"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error response if invalid authorization token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "Error response if courses not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "UserAuth": {
        "description": "Authentication user for course endpoints",
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "AuthorAuth": {
        "description": "Authentication author for course endpoints",
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "CourseResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "example": 200
          },
          "status": {
            "type": "string",
            "example": "OK"
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 1
              },
              "author_id": {
                "type": "integer",
                "example": 1
              },
              "title": {
                "type": "string",
                "example": "Golang course"
              },
              "slug": {
                "type": "string",
                "example": "golang-course"
              },
              "description": {
                "type": "string",
                "example": "Course description"
              },
              "perks": {
                "type": "string",
                "example": "perks1, perks2, perks3"
              },
              "price": {
                "type": "integer",
                "example": 99000
              },
              "banner": {
                "type": "string",
                "example": "assets/images/banners/golang.jpg"
              },
              "users_enrolled": {
                "type": "integer",
                "example": 100
              }
            }
          }
        }
      },
      "CourseBySlugResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "example": 200
          },
          "status": {
            "type": "string",
            "example": "OK"
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 1
              },
              "author_id": {
                "type": "integer",
                "example": 1
              },
              "title": {
                "type": "string",
                "example": "Golang course"
              },
              "slug": {
                "type": "string",
                "example": "golang-course"
              },
              "description": {
                "type": "string",
                "example": "Course description"
              },
              "perks": {
                "type": "string",
                "example": "perks1, perks2, perks3"
              },
              "price": {
                "type": "integer",
                "example": 99000
              },
              "banner": {
                "type": "string",
                "example": "assets/images/banners/golang.jpg"
              },
              "users_enrolled": {
                "type": "integer",
                "example": 100
              },
              "author": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "number",
                    "example": 200
                  },
                  "status": {
                    "type": "string",
                    "example": "OK"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 1
                      },
                      "name": {
                        "type": "string",
                        "example": "Bella Rizky Kharisma"
                      },
                      "email": {
                        "type": "string",
                        "example": "bella@example.com"
                      },
                      "profile": {
                        "type": "string",
                        "example": "This is profile"
                      },
                      "avatar": {
                        "type": "string",
                        "example": "assets/images/avatars/bella.png"
                      },
                      "token": {
                        "type": "string",
                        "example": "this.jwt.token"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ListOfCourses": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "example": 200
          },
          "status": {
            "type": "string",
            "example": "List all courses"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1
                },
                "author_id": {
                  "type": "integer",
                  "example": 1
                },
                "title": {
                  "type": "string",
                  "example": "Golang course"
                },
                "slug": {
                  "type": "string",
                  "example": "golang-course"
                },
                "description": {
                  "type": "string",
                  "example": "Course description"
                },
                "perks": {
                  "type": "string",
                  "example": "perks1, perks2, perks3"
                },
                "price": {
                  "type": "integer",
                  "example": 99000
                },
                "banner": {
                  "type": "string",
                  "example": "assets/images/banners/golang.jpg"
                },
                "users_enrolled": {
                  "type": "integer",
                  "example": 100
                }
              }
            }
          }
        }
      },
      "BadRequestError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "example": 400
          },
          "status": {
            "type": "string",
            "example": "Bad Request"
          },
          "data": {
            "type": "object",
            "properties": {
              "errors": {
                "type": "string",
                "example": "bad request error message"
              }
            }
          }
        }
      },
      "UnauthorizedError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "example": 401
          },
          "status": {
            "type": "string",
            "example": "Unauthorized"
          },
          "data": {
            "type": "object",
            "properties": {
              "errors": {
                "type": "string",
                "example": "unauthorized error message"
              }
            }
          }
        }
      },
      "NotFoundError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "example": 404
          },
          "status": {
            "type": "string",
            "example": "Not Found"
          },
          "data": {
            "type": "object",
            "properties": {
              "errors": {
                "type": "string",
                "example": "not found error message"
              }
            }
          }
        }
      }
    }
  }
}
